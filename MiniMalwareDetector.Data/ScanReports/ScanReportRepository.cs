using MiniMalwareDetector.Core.ScanReports;
using MiniMalwareDetector.Core.ScanReports.Repository;

namespace MiniMalwareDetector.Data.ScanReports;

/// <summary>
/// Класс реализующий репозиторий для отчета сканирования
/// </summary>
public class ScanReportRepository : IScanReportRepository
{
    /// <summary>
    /// Коллекция отчетов сканирования
    /// </summary>
    private static List<ScanReportModel> _scanReportStorage = new List<ScanReportModel>();
    
    /// <summary>
    /// Создать новый отчет
    /// </summary>
    /// <param name="scanReport">Модель отчета бизнес логики</param>
    /// <returns>Идентификатор отчета</returns>
    public Guid Create(ScanReport scanReport)
    {
        var entity = new ScanReportModel()
        {
            Id = scanReport.Id,
            PathDirectoryScan = scanReport.PathDirectoryScan,
            StartTime = scanReport.StartTime,
            EndTime = scanReport.EndTime,
            IsComplete = scanReport.IsComplete,
            ScanRulesId = scanReport.ScanRulesId,
            FileReportsId = scanReport.FileReportsId
        };
        
        _scanReportStorage.Add(entity);
        return entity.Id;
    }

    /// <summary>
    /// Обновить отчет сканирования
    /// </summary>
    /// <param name="scanReport">Модель отчета бизнес логики</param>
    public void Update(ScanReport scanReport)
    {
        var entity = _scanReportStorage.FirstOrDefault(x => x.Id == scanReport.Id);

        if (entity != null)
        {
            entity.StartTime = scanReport.StartTime;
            entity.EndTime = scanReport.EndTime;
            entity.IsComplete = scanReport.IsComplete;
            entity.ScanRulesId = scanReport.ScanRulesId;
            entity.FileReportsId = scanReport.FileReportsId;
        }
    }

    /// <summary>
    /// Получить отчет по идентификатору
    /// </summary>
    /// <param name="id">Идентификатор</param>
    /// <returns>Модель отчета бизнес логики</returns>
    public ScanReport Get(Guid id)
    {
        var entity = _scanReportStorage.FirstOrDefault(x => x.Id == id);

        if (entity == null)
        {
            return null;
        }

        return new ScanReport()
        {
            Id = entity.Id,
            PathDirectoryScan = entity.PathDirectoryScan,
            StartTime = entity.StartTime,
            EndTime = entity.EndTime,
            IsComplete = entity.IsComplete,
            ScanRulesId = entity.ScanRulesId,
            FileReportsId = entity.FileReportsId
        };
    }
}