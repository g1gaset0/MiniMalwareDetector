using System.Collections.Concurrent;
using System.Text;
using MiniMalwareDetector.Core.FileReports;
using MiniMalwareDetector.Core.FileReports.Repository;
using MiniMalwareDetector.Core.Helpers;
using MiniMalwareDetector.Core.ScanReports;
using MiniMalwareDetector.Core.ScanReports.Repository;
using MiniMalwareDetector.Core.ScanRules;
using MiniMalwareDetector.Core.ScanRules.Repository;

namespace MiniMalwareDetector.Core;

public class ScanService : IScanService
{
    private readonly IScanRuleRepository _scanRuleRepository;
    private readonly IScanReportRepository _scanReportRepository;
    private readonly IFileReportRepository _fileReportRepository;

    public ScanService(IScanRuleRepository scanRuleRepository, IScanReportRepository scanReportRepository,
        IFileReportRepository fileReportRepository)
    {
        _scanRuleRepository = scanRuleRepository;
        _scanReportRepository = scanReportRepository;
        _fileReportRepository = fileReportRepository;
    }

    public void Scan(string id, string pathDirectoryScan, List<FileForm> filesForm)
    {
        var scanRuleList = _scanRuleRepository.GetAll();
        var scanReport = new ScanReport()
        {
            Id = Guid.Parse(id),
            ScanRulesId = scanRuleList.Select(x => x.Id).ToList(),
            FileReportsId = new ConcurrentBag<Guid>(),
            PathDirectoryScan = pathDirectoryScan
        };
        _scanReportRepository.Create(scanReport);

        scanReport.StartTime = DateTime.Now;

        Parallel.ForEach(filesForm, new ParallelOptions() { MaxDegreeOfParallelism = Environment.ProcessorCount },
            file =>
            {
                var isMalwareFile = false;
                if (!file.isReadError)
                {
                    foreach (var scanRule in scanRuleList)
                    {
                        if (Path.GetExtension(file.Name) != scanRule.Extension && (scanRule.Extension != "*"))
                            continue;
                        if (file.Text.Contains(scanRule.Malware))
                        {
                            isMalwareFile = true;
    
                            var fileReport = new FileReport()
                            {
                                FileName = file.Name,
                                RuleId = scanRule.Id,
                                ReportType = FileReportType.Malware,
                                ScanReportId = scanReport.Id
                            };
                            var fileReportId = _fileReportRepository.Create(fileReport);
    
                            scanReport.FileReportsId.Add(fileReportId);
                        }
                    }
    
                    if (!isMalwareFile)
                    {
                        var fileReport = new FileReport()
                        {
                            FileName = file.Name,
                            ReportType = FileReportType.Clear,
                            ScanReportId = scanReport.Id
                        };
                        var fileReportId = _fileReportRepository.Create(fileReport);
    
                        scanReport.FileReportsId.Add(fileReportId);
                    }
                }
                else
                {
                    var fileReport = new FileReport()
                    {
                        FileName = file.Name,
                        ReportType = FileReportType.Error,
                        ScanReportId = scanReport.Id
                    };
                    var fileReportId = _fileReportRepository.Create(fileReport);
        
                    scanReport.FileReportsId.Add(fileReportId);
                }
            });

        scanReport.EndTime = DateTime.Now;
        scanReport.IsComplete = true;
        _scanReportRepository.Update(scanReport);
    }

    public string GetReport(string id)
    {
        Guid idGuid;
        try
        {
            idGuid = Guid.Parse(id);
        }
        catch
        {
            return "Id не соответсвует шаблону Guid";
        }

        var scanReport = _scanReportRepository.Get(idGuid);
        if (scanReport == null)
        {
            return "Сканирование с таким Id не найдено";
        }

        if (scanReport.IsComplete)
        {
            var scanRuleList = _scanRuleRepository.GetAll();
            var fileReportList = _fileReportRepository.GetFileReportsByScanReportId(scanReport.Id);
            var report = new StringBuilder();
            
            report.AppendLine("====== Scan result ======\n");
            report.AppendLine($"Directory: {scanReport.PathDirectoryScan}");
            report.AppendLine($"Processed files: {scanReport.FileReportsId.Count}");

            foreach (var scanRule in scanRuleList)
            {
                report.AppendLine($"{scanRule.Name} detects: {fileReportList.Count(x => x.RuleId == scanRule.Id)}");
            }

            report.AppendLine($"Errors: {fileReportList.Count(x => x.ReportType == FileReportType.Error)}");
            report.AppendLine($"Exection time: {scanReport.EndTime - scanReport.StartTime}");
            report.AppendLine("=========================");
            return report.ToString();
        }

        return "Сканирование выполняется, пожалуйста подождите";
    }
}