using System.Text;
using MiniMalwareDetector.Core.FileReports;
using MiniMalwareDetector.Core.FileReports.Repository;
using MiniMalwareDetector.Core.ScanReports;
using MiniMalwareDetector.Core.ScanReports.Repository;
using MiniMalwareDetector.Core.ScanRules;
using MiniMalwareDetector.Core.ScanRules.Repository;

namespace MiniMalwareDetector.Core;

public class ScanService : IScanService
{
    private readonly IScanRuleRepository _scanRuleRepository;
    private readonly IScanReportRepository _scanReportRepository;
    private readonly IFileReportRepository _fileReportRepository;

    public ScanService(IScanRuleRepository scanRuleRepository, IScanReportRepository scanReportRepository, IFileReportRepository fileReportRepository)
    {
        _scanRuleRepository = scanRuleRepository;
        _scanReportRepository = scanReportRepository;
        _fileReportRepository = fileReportRepository;
    }

    public void Scan(string id, string pathDirectoryScan)
    {
        
        
        var scanRuleList = _scanRuleRepository.GetAll();
        var scanReport = new ScanReport()
        {
            Id = Guid.Parse(id),
            ScanRulesId = scanRuleList.Select(x => x.Id).ToList(),
            FileReportsId = new List<Guid>(),
            PathDirectoryScan = pathDirectoryScan
        };
        _scanReportRepository.Create(scanReport);
        var directoryPath = Path.Combine(Path.Combine(Directory.GetCurrentDirectory(), "Scanning"), id);
        
        scanReport.StartTime = DateTime.Now;
        var filesPath = Directory.GetFiles(directoryPath, "*", SearchOption.AllDirectories);
        
        Parallel.ForEach(filesPath, new ParallelOptions(){ MaxDegreeOfParallelism = Environment.ProcessorCount}, filePath =>
        {
            var isMalwareFile = false;
            try
            {
                using (var reader = new StreamReader(filePath))
                {
                    var text = reader.ReadToEnd();
                    foreach (var scanRule in scanRuleList)
                    {
                        if (Path.GetExtension(filePath) != scanRule.Extension) continue;
                        if (text.Contains(scanRule.Malware))
                        {
                            isMalwareFile = true;
                            
                            var fileReport = new FileReport()
                            {
                                FileName = Path.GetFileName(filePath),
                                RuleId = scanRule.Id,
                                ReportType = FileReportType.Malware,
                                ScanReportId = scanReport.Id
                            };
                            var fileReportId = _fileReportRepository.Create(fileReport);
                            
                            scanReport.FileReportsId.Add(fileReportId);
                        }
                    }
                    if (!isMalwareFile)
                    {
                        var fileReport = new FileReport()
                        {
                            FileName = Path.GetFileName(filePath),
                            ReportType = FileReportType.Clear,
                            ScanReportId = scanReport.Id
                        };
                        var fileReportId = _fileReportRepository.Create(fileReport);
                        
                        scanReport.FileReportsId.Add(fileReportId);
                    }
                }
            }
            catch
            {
                var fileReport = new FileReport()
                {
                    FileName = Path.GetFileName(filePath),
                    ReportType = FileReportType.Error,
                    ScanReportId = scanReport.Id
                };
                var fileReportId = _fileReportRepository.Create(fileReport);
                        
                scanReport.FileReportsId.Add(fileReportId);
            }
        });
        
        scanReport.EndTime = DateTime.Now;
        scanReport.IsComplete = true;
        _scanReportRepository.Update(scanReport);
    }

    public string GetReport(string id)
    {
        var scanReport = _scanReportRepository.Get(Guid.Parse(id));

        if (scanReport == null)
        {
            return "Сканирование с таким Id не найдено";
        }

        if (scanReport.IsComplete)
        {
            var scanRuleList = _scanRuleRepository.GetAll();
            var fileReportList = _fileReportRepository.GetFileReportsByScanReportId(scanReport.Id);
            return CreateReportForDisplay(scanReport, scanRuleList, fileReportList);
        }
        return "Сканирование выполняется, пожалуйста подождите";
    }

    private static string CreateReportForDisplay(ScanReport scanReport, List<ScanRule> scanRuleList, List<FileReport> fileReportList)
    {
        var report = new StringBuilder();
        report.AppendLine("====== Scan result ======\n");
        report.AppendLine($"Directory: {scanReport.PathDirectoryScan}");
        report.AppendLine($"Processed files: {scanReport.FileReportsId.Count}");

        foreach (var scanRule in scanRuleList)
        {
            report.AppendLine($"{scanRule.Name} detects: {fileReportList.Count(x => x.RuleId == scanRule.Id)}");
        }

        report.AppendLine($"Errors: {fileReportList.Count(x => x.ReportType == FileReportType.Error)}");
        report.AppendLine($"Exection time: {scanReport.EndTime - scanReport.StartTime}");
        report.AppendLine("=========================");
        return report.ToString();
    }
}